@charset "UTF-8";
/* ============================================================================
   SETTINGS
   ========================================================================= */
/**
 * All of Scally's settings (Sass variables).
 *
 * The settings are broken down into two categories:
 *
 * - **Global**.....settings for the entire Scally library.
 * - **Local**......settings for a particular Scally partial.
 *
 * All settings start with a `scally` namespace followed by one hyphen:
 *
   $scally-
 *
 * This namespace prevents your project settings and Scally's settings from
 * clashing and allows you to easily see what is coming from Scally and what
 * isn't.
 *
 * In addition to the `scally` namespace we also have namespaces to identify
 * **Global** and **Local** settings:
 *
 * **Global** settings include a letter `g` to easily identify them:
 *
   $scally-g-
 *
 * **Local** settings include the name of the relevant partial they belong to.
 * For example, settings for the `_base.scss` and `_grid.scss` partials look
 * like this:
 *
   $scally-base-
   $scally-grid-
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1.  Colours (Global)
 * 2.  Typography (Global)
 * 3.  Spacing (Global)
 * 4.  Breakpoints (Global)
 * 5.  Z-Index system (Global)
 * 6.  HiDPI units (Global)
 * 7.  HTML textual `input`s (Global)
 * 8.  Normalise and Reset (Local)
 * 9.  Base (Local)
 * 10. Container (Local)
 * 11. Grid (Local)
 * 12. Helpers (Local)
 */
/* 1. Colours (Global)
   ========================================================================= */
/**
 * Black and white.
 */
/**
 * Text.
 */
/**
 * Links.
 */
/* 2. Typography (Global)
   ========================================================================= */
/**
 * Base sizes.
 */
/**
 * Heading sizes.
 */
/**
 * Line height.
 */
/**
 * Line height ratio.
 *
 * N.B. non-overridable.
 */
/**
 * Font families.
 */
/**
 * Weights.
 *
 * N.B. all the font weights are available when you're using webfonts i.e.
 * fonts brought in via the `@font-face` declaration. It's better to store each
 * each webfont weights in settings rather than trying to remember each of the
 * numbers that the weights correspond to, plus it ensures that your project's
 * typography is applied consistency. You can use these settings for
 * non-webfonts i.e. system fonts but typically you'll only need to apply one
 * weight which is **bold** and in that case using `font-weight: bold;` is
 * fine.
 */
/* 3. Spacing (Global)
   ========================================================================= */
/**
 * The base spacing unit uses the base line height to achieve a vertical
 * rhythm.
 */
/* 4. Breakpoints (Global)
   ========================================================================= */
/**
 * The breakdown of the breakpoints is based off this chart:
 * http://static.lukew.com/unified_device_design.png
 *
 * Here's the thinking:
 *
 * - Palm..........smart-phones and feature phones—anything that can fit into
 *                 the palm of a hand.
 * - Lap...........typically tablets, notebooks and laptops—anything that is
 *                 portable that doesn't include phones.
 * - Lap mid.......smaller tablets/notebooks and e-readers e.g. Kindle.
 * - Lap large.....larger tablets and laptops.
 * - Desk..........desktop computers, TVs, etc.—anything that isn't portable.
 * - Desk large....larger desktop computer monitors, TVs, and who knows what
 *                 else?
 *
 * The breakpoints:
 *
 * - Palm: 0–640px
 * - Lap: 641px +
 * - Lap mid: 768px +
 * - Lap large: 901px +
 * - Desk: 1200px +
 * - Desk large: 1366px +
 *
 * @credit
 * http://www.lukew.com/ff/entry.asp?1679
 */
/**
 * All the breakpoints divided by the default user-agent font size: `16`. We
 * do this division as all viewport width and height media queries are to be
 * applied with the `em` unit. If you wish to override any of the breakpoints
 * then don't forget to apply this calculation:
 *
    ([breakpoint-value] / 16) * 1em
 *
 * Applying a breakpoint in a media query:
 *
    @media (max-width: bp(palm)) {
        background-color: crimson;
    }

    @media (min-width: bp(desk)) {
        background-color: crimson;
    }
 *
 * N.B. Scally uses a Sass map to apply all the breakpoints therefore we use a
 * Sass function to make it easier to apply the map keys, see:
 * **Mixins/Functions -> Retrieve from maps**.
 */
/**
 * Apply the default breakpoint for the
 * **Mixins/Functions -> Apply at breakpoints** mixin.
 */
/* 5. Z-Index system (Global)
   ========================================================================= */
/**
 * A nice system that uses a Sass map to keep your project `z-index`s
 * maintainable, sane, and free of those crazy `z-index: 99999;` occurrences!
 * Be sure to read this to fully understand how the system works:
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 *
 * Scally kicks it off by providing a standard stacking order that projects
 * may require:
 *
    <body>
        <dialog>
            <dialog-close-button>
        <dialog-underlay>
        <header>
        <main>
        <footer>
    </body>
 *
 * You can then update the Sass map in your project's `_settings.scss`
 * partial. And be sure to use nested maps to make the system aware of
 * stacking contexts, as having a flat map will soon become a headache to
 * maintain.
 *
 * Applying `z-index`s with this system:
 *
    .c-header {
        z-index: z(header);
    }
 *
 * And for nested stacking contexts (defined via a nested map):
 *
    .c-dialog__close-button {
        z-index: z(dialog-elements, close-button);
    }
 *
 * N.B. Scally uses a Sass map (and nested maps) to apply this Z-Index system
 * therefore we use a Sass function to make it easier to apply the map keys
 * and retrieve nested map keys, see:
 * **Mixins/Functions -> Retrieve from maps**.
 */
/* 6. HiDPI units (Global)
   ========================================================================= */
/**
 * HiDPI units, currently being used in:
 * **Mixins/Functions -> HiDPI background images**.
 */
/* 7. HTML textual `input`s (Global)
   ========================================================================= */
/* 8. Normalise and Reset (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/* 9. Base (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Root element.
 */
/**
 * Links.
 */
/**
 * Horizontal rule.
 */
/**
 * Forms.
 */
/* 10. Container (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Widths.
 */
/**
 * Gutter size.
 */
/* 11. Grid (Local)
   ========================================================================= */
/**
 * Grid item span amounts.
 */
/**
 * For all the grid item span amounts, turn on the ability to apply them at
 * breakpoints via the boolean settings, then define the breakpoints. See:
 * "Mixins/Functions -> Apply at breakpoints", to understand how this works.
 */
/* 12. Helpers (Local)
   ========================================================================= */
/**
 * For certain **Helpers** turn on the ability to apply them at breakpoints
 * via boolean settings, then define the breakpoints. See:
 * "Mixins/Functions -> Apply at breakpoints", to understand how this works.
 */
/**
 * Text sizes.
 */
/**
 * Text alignments.
 */
/**
 * Text truncate.
 */
/**
 * Hide.
 */
/**
 * Spacing.
 */
/* ============================================================================
   NORMALISE AND RESET
   ========================================================================= */
/**
 * Let's get all browsers rendering all elements more consistently and in line
 * with modern standards, and let's nuke certain user-agent styles so that
 * everything is on an even playing field.
 *
 * Up to date with normalize.css v4.1.1.
 *
 * @credit
 * https://necolas.github.io/normalize.css/
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element and global resets
 * 2. Block-level elements
 * 3. Inline elements
 * 4. Embedded, image, and multimedia, elements
 * 5. Form elements
 * 6. Interactions
 */
/* 1. Root element and global resets
   ========================================================================= */
/**
 * 1. Reset the `box-sizing` property to the more friendly `border-box` value.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  box-sizing: border-box;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* 1 */
*,
*::before,
*::after {
  box-sizing: inherit;
}

/**
 * Remove all margins, paddings, and borders.
 *
 * N.B. do not include the following elements:
 * - `<input>`
 * - `<button>`
 * - `<textarea>`
 *
 * The complete list of HTML5 elements:
 * https://developer.mozilla.org/en/docs/Web/Guide/HTML/HTML5/HTML5_element_list
 */
a,
abbr,
address,
article,
aside,
b,
blockquote,
body,
caption,
cite,
code,
dd,
del,
details,
dfn,
dialog,
div,
dl,
dt,
em,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
main,
menu,
nav,
object,
ol,
p,
pre,
q,
s,
samp,
section,
small,
span,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
u,
ul,
var {
  margin: 0;
  padding: 0;
  border: 0;
}

/* 2. Block-level elements
   ========================================================================= */
/**
 * - Correct `block` display not defined for `<details>` or `<summary>` in
 *   IE 10/11 and Firefox.
 * - Correct `block` display not defined for `<main>` in IE 11.
 */
details,
main,
summary {
  display: block;
}

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  /* 1 */
  display: none;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/* 3. Inline elements
   ========================================================================= */
/**
 * 1. Remove the grey background colour from active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers.
 */
a:active,
a:hover {
  outline-width: 0;
}

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `<sub>` and `<sup>` affecting line height in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* 4. Embedded, image and multimedia, elements
   ========================================================================= */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* 5. Form elements
   ========================================================================= */
/**
 * 1. Change font properties to `inherit` in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold;
}

/**
 * Show the overflow in Edge.
 * 1. Show the overflow in IE.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `<audio>` and `<video>`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `<fieldset>` elements in IE.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  white-space: normal;
  /* 1 */
}

/**
 * Indicate that `<label>` will shift focus to the associated `<input>`
 * element.
 */
label {
  cursor: pointer;
}

/**
 * Remove default vertical scrollbar in IE 10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  padding: 0;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Remove the clear field button (an "X" icon) and the reveal password button
 * (an "eye" icon) that is generated by IE 10+ for textual inputs.
 *
 * @credit
 * http://stackoverflow.com/a/21869433/1116204
 */
::-ms-clear,
::-ms-reveal {
  display: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
 * Rules for iOS devices.
 *
 * We isolate these rules behind a `.ios` class—or whatever name you apply to
 * the `$scally-base-target-ios-selector` setting—that is appended to the
 * `<html>` element via user-agent sniffing, for example:
 *
    <html class="ios">
 *
 * N.B. this functionality is not part of the Shell framework, you will need to
 * add it yourself to the project Shell applies too.
 */
.ios {
  /**
     * Remove the top inner shadow from iOS inputs.
     *
     * @credit
     * https://davidwalsh.name/input-shadows-ipad
     */
  /**
     * Remove rounded corners that iOS applies to all `<input>` buttons.
     */
  /**
     * Remove rounded corners from iOS search inputs.
     */
}

.ios input[type="text"],
.ios input[type="search"],
.ios input[type="tel"],
.ios input[type="url"],
.ios input[type="email"],
.ios input[type="password"],
.ios input[type="month"],
.ios input[type="week"],
.ios input[type="time"],
.ios input[type="date"],
.ios input[type="datetime"],
.ios input[type="datetime-local"],
.ios input[type="number"],
.ios textarea {
  -webkit-appearance: caret;
}

.ios input[type="submit"],
.ios input[type="button"],
.ios input[type="image"],
.ios input[type="reset"] {
  border-radius: 0;
}

.ios input[type="search"] {
  appearance: none;
}

/* 6. Interactions
   ========================================================================= */
/**
 * Suppress the focus outline on links that cannot be accessed via a keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 *
 * N.B. it is okay to use `!important` here as we're doing it preemptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */
[tabindex="-1"]:focus {
  outline: none !important;
}

/**
 * Avoid 300ms click delay on touch devices that support the `touch-action` CSS
 * property.
 *
 * In particular, unlike most other browsers, IE 11+Edge on Windows 10 on touch
 * devices and IE Mobile 10-11 DON'T remove the click delay when
 * `<meta name="viewport" content="width=device-width">` is present.
 * However, they DO support removing the click delay via
 * `touch-action: manipulation`.
 *
 * See:
 * - http://caniuse.com/#feat=css-touch-action
 * - http://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay
 * - https://adactio.com/journal/10019
 */
a,
area,
button,
input,
label,
select,
summary,
textarea,
[tabindex]:not([tabindex="-1"]) {
  touch-action: manipulation;
}
