@charset "UTF-8";
/* ============================================================================
   SETTINGS
   ========================================================================= */
/**
 * All of Scally's settings (Sass variables).
 *
 * The settings are broken down into two categories:
 *
 * - **Global**.....settings for the entire Scally library.
 * - **Local**......settings for a particular Scally partial.
 *
 * All settings start with a `scally` namespace followed by one hyphen:
 *
   $scally-
 *
 * This namespace prevents your project settings and Scally's settings from
 * clashing and allows you to easily see what is coming from Scally and what
 * isn't.
 *
 * In addition to the `scally` namespace we also have namespaces to identify
 * **Global** and **Local** settings:
 *
 * **Global** settings include a letter `g` to easily identify them:
 *
   $scally-g-
 *
 * **Local** settings include the name of the relevant partial they belong to.
 * For example, settings for the `_base.scss` and `_grid.scss` partials look
 * like this:
 *
   $scally-base-
   $scally-grid-
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1.  Colours (Global)
 * 2.  Typography (Global)
 * 3.  Spacing (Global)
 * 4.  Breakpoints (Global)
 * 5.  Z-Index system (Global)
 * 6.  HiDPI units (Global)
 * 7.  HTML textual `input`s (Global)
 * 8.  Base (Local)
 * 9.  Container (Local)
 * 10. Grid (Local)
 * 11. Helpers (Local)
 */
/* 1. Colours (Global)
   ========================================================================= */
/**
 * Black and white.
 */
/**
 * Text.
 */
/**
 * Links.
 */
/* 2. Typography (Global)
   ========================================================================= */
/**
 * Base sizes.
 */
/**
 * Heading sizes.
 */
/**
 * Line height.
 */
/**
 * Line height ratio.
 *
 * N.B. non-overridable.
 */
/**
 * Families.
 */
/**
 * Weights.
 *
 * N.B. all the font weights are there to be used when you're using webfonts
 * i.e. fonts brought in via the `@font-face` declaration. It's better to
 * store each webfont weights in settings rather than trying to remember each
 * of the numbers that the weights correspond to, plus it ensures that your
 * project's typography is applied consistency. You can use these settings for
 * none webfonts i.e. system fonts but typically you'll only need to apply one
 * weight which is **bold** and in that case using `font-weight: bold;` is
 * fine.
 */
/**
 * Maximum line length using the `ch` unit.
 */
/* 3. Spacing (Global)
   ========================================================================= */
/**
 * The base spacing unit uses the base line height to achieve a vertical
 * rhythm.
 */
/* 4. Breakpoints (Global)
   ========================================================================= */
/**
 * The breakdown of the breakpoints is based off this chart:
 * http://static.lukew.com/unified_device_design.png
 *
 * Here's the thinking:
 *
 * - Palm..........smart-phones and feature phones—anything that can fit into
 *                 the palm of a hand.
 * - Lap...........typically tablets, notebooks and laptops—anything that is
 *                 portable that doesn't include phones.
 * - Lap small.....smaller tablets/notebooks and e-readers e.g. Kindle.
 * - Lap large.....larger tablets and laptops.
 * - Desk..........desktop computers, TVs, etc.—anything that isn't portable.
 * - Desk large....larger desktop computer monitors, TVs, and who knows what
 *                 else?
 *
 * The breakpoints:
 *
 * - Palm: 0–640px
 * - Lap: 641px +
 * - Lap small: 768px +
 * - Lap large: 901px +
 * - Desk: 1200px +
 * - Desk large: 1366px +
 *
 * @credit
 * http://www.lukew.com/ff/entry.asp?1679
 */
/**
 * All the breakpoints divided by the default user-agent font size: `16`. We
 * do this division as all viewport width and height media queries are to be
 * applied with the `em` unit. If you wish to override any of the breakpoints
 * then don't forget to apply this calculation:
 *
    ([breakpoint-value] / 16) * 1em
 *
 * Applying a breakpoint in a media query:
 *
    @media (max-width: bp(palm)) {
        background-color: crimson;
    }

    @media (min-width: bp(desk)) {
        background-color: crimson;
    }
 *
 * N.B. Scally uses a Sass map to apply all the breakpoints therefore we use a
 * Sass function to make it easier to apply the map keys, see:
 * **Mixins/Functions -> Retrieve from maps**.
 */
/**
 * Apply the default breakpoint for the
 * **Mixins/Functions -> Apply at breakpoints** mixin.
 */
/* 5. Z-Index system (Global)
   ========================================================================= */
/**
 * A nice system that uses a Sass map to keep your project `z-index`s
 * maintainable, sane, and free of those crazy `z-index: 99999;` occurrences!
 * Be sure to read this to fully understand how the system works:
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 *
 * Scally kicks it off by providing a standard stacking order that projects
 * may require:
 *
    <body>
        <modal>
            <modal-close-button>
        <modal-underlay>
        <header>
        <main>
        <footer>
    </body>
 *
 * You can then update the Sass map in your project's `_settings.scss`
 * partial. And be sure to use nested maps to make the system aware of
 * stacking contexts, as having a flat map will soon become a headache to
 * maintain.
 *
 * Applying `z-index`s with this system:
 *
    .c-header {
        z-index: z(header);
    }
 *
 * And for nested stacking contexts (defined via a nested map):
 *
    .c-modal__close-button {
        z-index: z(modal-elements, close-button);
    }
 *
 * N.B. Scally uses a Sass map (and nested maps) to apply this Z-Index system
 * therefore we use a Sass function to make it easier to apply the map keys
 * and retrieve nested map keys, see:
 * **Mixins/Functions -> Retrieve from maps**.
 */
/* 6. HiDPI units (Global)
   ========================================================================= */
/**
 * HiDPI units, currently being used in:
 * **Mixins/Functions -> HiDPI background images**.
 */
/* 7. HTML textual `input`s (Global)
   ========================================================================= */
/* 8. Base (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Root element.
 */
/**
 * Links.
 */
/**
 * Horizontal rule.
 */
/**
 * Forms.
 */
/* 9. Container (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Widths.
 */
/**
 * Gutter size.
 */
/* 10. Grid (Local)
   ========================================================================= */
/**
 * Grid item widths.
 */
/**
 * For all the grid item widths, turn on the ability to apply them at
 * breakpoints via the boolean settings, then define the breakpoints. See:
 * "Mixins/Functions -> Apply at breakpoints", to understand how this works.
 */
/* 11. Helpers (Local)
   ========================================================================= */
/**
 * For certain **Helpers** turn on the ability to apply them at breakpoints
 * via boolean settings, then define the breakpoints. See:
 * "Mixins/Functions -> Apply at breakpoints", to understand how this works.
 */
/**
 * Text sizes.
 */
/**
 * Text alignments.
 */
/**
 * Text truncate.
 */
/**
 * Hide.
 */
/**
 * Spacing.
 */
